@page "/Scoring"
@using CTFOtIdentity.SQLManagement.Definitions
@using CTFOtIdentity.SQLManagement.Services
@using Microsoft.EntityFrameworkCore.Infrastructure
@inject ICTFTeamServices _TeamServices
@inject ICTFUsersServices _UsersServices
@inject ICTFEtapesServices _EtapesServices
@inject ICTFScoringServices _ScoringServices

<h3>Tableau des Scores</h3>

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenChart>
                @foreach (var teams in Teams)
                {
                    if (GetScoByTeamAsync(teams.Id))
                    {
                        <RadzenLineSeries Smooth="false" Data=@BufferScore CategoryProperty="DateTime" Title=@teams.Name LineType="LineType.Dashed" ValueProperty="Points">
                            <RadzenMarkers MarkerType="MarkerType.Square"/>
                            <RadzenSeriesDataLabels Visible="false"/>
                        </RadzenLineSeries>
                    }
                }
                <RadzenCategoryAxis Padding="20"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="Points"/>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>

<RadzenDataGrid AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true" 
            Data="@ScoreAh" TItem="CTFScoring">
    <Columns>
        <RadzenDataGridColumn TItem="CTFScoring" Title="Nom de l'équipe">
            <Template Context="scoring">
                @(GetTeamName(scoring.IdTeam))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CTFScoring" Title="Nom de l'Étape">
            <Template Context="scoring">
                @GetEtapeName(scoring.IdEtape)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CTFScoring" Title="Nom du Joueur">
            <Template Context="scoring">
                @GetPlayerName(scoring.IdPlayer)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CTFScoring" Title="Points">
            <Template Context="scoring">
                <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@GetScoreEtape(scoring.IdEtape)" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CTFScoring" Title="Heure de Validation">
            <Template Context="scoring">
                @scoring.DateTime
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    List<CTFTeams> Teams;
    List<CTFUsers> Players;
    List<CTFEtapes> Etapes;
    List<CTFScoring> BufferScore;
    List<CTFScoring> ScoreAh;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Teams = await _TeamServices.GetTeamsAsync();
        Players = await _UsersServices.GetUsersAsync();
        Etapes = await _EtapesServices.GetEtapesAsync();
        ScoreAh = await _ScoringServices.GetScoringAsync();

        var timer = new Timer(new TimerCallback(_ => InvokeAsync(StateHasChanged)), null, 0, 5000);

    }
    
    public string GetTeamName(int TeamId)
    {
        return Teams.Where(x => x.Id == TeamId).FirstOrDefault().Name;
    }
    
    public string GetPlayerName(int PlayerId)
    {
        return Players.Where(x => x.Id == PlayerId).FirstOrDefault().Pseudo;
    }

    public string GetEtapeName(int EtapeId)
    {
        return Etapes.Where(x => x.Id == EtapeId).FirstOrDefault().Name;
    }

    public string GetScoreEtape(int EtapeId)
    {
        return Etapes.Where(x => x.Id == EtapeId).FirstOrDefault().Points.ToString();
    }
    
    public bool GetScoByTeamAsync(int TeamId)
    {
        try
        {
            BufferScore = _ScoringServices.GetScoringByTeam(TeamId);
            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }

}